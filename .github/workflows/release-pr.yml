name: Create Release PR

on:
  push:
    branches: [staging]

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    name: Create or Update Release PR

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper comparison
          
      - name: Fetch all branches
        run: |
          # Fetch without checking out
          git fetch origin main
          git fetch origin staging
          # Create local tracking branches if they don't exist
          git show-ref --verify --quiet refs/heads/main || git branch --track main origin/main
          git show-ref --verify --quiet refs/heads/staging || git branch --track staging origin/staging
          echo "Current branch: $(git branch --show-current)"
          echo "Available branches: $(git branch -a)"

      - name: Get release information
        id: release-info
        run: |
          # Get next release number
          LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName // "v0.0.0"')
          if [[ "$LATEST_TAG" == "null" ]] || [[ "$LATEST_TAG" == "" ]]; then
            LATEST_TAG="v0.0.0"
          fi
          
          # Extract version number and increment
          VERSION_NUMBER=$(echo $LATEST_TAG | sed 's/v//' | awk -F. '{print $1"."$2"."$3+1}')
          NEXT_VERSION="v${VERSION_NUMBER}"
          
          echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          echo "Next release version: ${NEXT_VERSION}"
          
          # Debug: Show current state
          echo "=== Git Debug Info ==="
          echo "Current HEAD: $(git rev-parse HEAD)"
          echo "Main branch: $(git rev-parse origin/main)"
          echo "Staging branch: $(git rev-parse origin/staging)"
          echo "Commits on staging not on main:"
          git log origin/main..origin/staging --oneline || echo "No commits found"
          
          # Get commits between main and staging
          COMMITS=$(git log origin/main..origin/staging --oneline --pretty=format:"- %s (%h)" | head -20)
          
          # If no commits, try alternative approaches
          if [[ -z "$COMMITS" ]]; then
            echo "No commits found between origin/main and origin/staging, trying HEAD..."
            COMMITS=$(git log origin/main..HEAD --oneline --pretty=format:"- %s (%h)" | head -20)
          fi
          
          # Final fallback
          if [[ -z "$COMMITS" ]]; then
            echo "Still no commits found, showing recent commits on current branch:"
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" -5)
            COMMITS="**Recent commits on staging:**
            $COMMITS

            _Note: Unable to determine diff with main branch. This may indicate the branches are in sync._"
          fi
          
          # Save commits to file (multiline output)
          # Use a custom delimiter to handle multiline content
          DELIMITER="EOF_$(openssl rand -hex 8)"
          echo "commits<<${DELIMITER}" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "${DELIMITER}" >> $GITHUB_OUTPUT
          
          echo "Commits to be released:"
          echo "$COMMITS"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check if PR already exists
        id: check-pr
        run: |
          # Debug: List all PRs for visibility
          echo "=== Debug: Listing all open PRs ==="
          gh pr list --state open --json number,headRefName,baseRefName,title
          
          # Find PR from staging to main
          PR_NUMBER=$(gh pr list --base main --head staging --state open --json number --jq '.[0].number // empty')
          
          # Fallback: Try to find any PR from any branch to main
          if [[ -z "$PR_NUMBER" ]]; then
            echo "No PR found from staging to main, checking for any PR to main..."
            PR_NUMBER=$(gh pr list --base main --state open --json number,headRefName --jq '.[0].number // empty')
          fi
          
          echo "Found PR number: ${PR_NUMBER:-None}"
          echo "pr_exists=${PR_NUMBER:-false}" >> $GITHUB_OUTPUT
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release PR
        if: steps.check-pr.outputs.pr_exists == '' || steps.check-pr.outputs.pr_exists == 'false'
        run: |
          # Create a temporary file for the PR body
          PR_BODY_FILE=$(mktemp)
          cat > "$PR_BODY_FILE" << EOF
          ## 🚀 Release Pull Request - ${{ steps.release-info.outputs.next_version }}

          This PR contains all changes from \`staging\` ready to be deployed to production.

          ### 📦 What's New in ${{ steps.release-info.outputs.next_version }}

          ${{ steps.release-info.outputs.commits || 'No new commits' }}

          ### 🔍 Review Checklist
          - [ ] All tests are passing
          - [ ] Changes have been tested on staging environment
          - [ ] Database migrations (if any) have been reviewed
          - [ ] No breaking changes or proper migration plan in place
          - [ ] Documentation has been updated if needed

          ### 🌍 Staging Environment
          - **URL**: https://wilnk-staging.nalaka-manathunga.workers.dev
          - **Database**: \`wilnk-staging\`

          ### 🎯 Production Environment  
          After merge, changes will be deployed to:
          - **URL**: https://wilnk-production.nalaka-manathunga.workers.dev
          - **Database**: \`wilnk-production\`

          ---

          > **Note**: This PR is automatically created/updated when changes are pushed to the \`staging\` branch.
          > The commit list above reflects the current changes and will be updated automatically.
          EOF

          gh pr create \
            --title "🚀 Release ${{ steps.release-info.outputs.next_version }}: staging → main" \
            --body-file "$PR_BODY_FILE" \
            --base main \
            --head staging \
            --label "release,staging→main,auto-pr" \
            --assignee mmNalaka
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update existing PR
        if: steps.check-pr.outputs.pr_exists != ''
        run: |
          # Create a temporary file for the PR body
          PR_BODY_FILE=$(mktemp)
          cat > "$PR_BODY_FILE" << EOF
          ## 🚀 Release Pull Request - ${{ steps.release-info.outputs.next_version }}

          This PR contains all changes from \`staging\` ready to be deployed to production.

          ### 📦 What's New in ${{ steps.release-info.outputs.next_version }}

          ${{ steps.release-info.outputs.commits || 'No new commits' }}

          ### 🔍 Review Checklist
          - [ ] All tests are passing
          - [ ] Changes have been tested on staging environment
          - [ ] Database migrations (if any) have been reviewed
          - [ ] No breaking changes or proper migration plan in place
          - [ ] Documentation has been updated if needed

          ### 🌍 Staging Environment
          - **URL**: https://wilnk-staging.nalaka-manathunga.workers.dev
          - **Database**: \`wilnk-staging\`

          ### 🎯 Production Environment  
          After merge, changes will be deployed to:
          - **URL**: https://wilnk-production.nalaka-manathunga.workers.dev
          - **Database**: \`wilnk-production\`

          ---

          > **Note**: This PR is automatically created/updated when changes are pushed to the \`staging\` branch.
          > The commit list above reflects the current changes and will be updated automatically.
          EOF

          # Update PR title with new version
          gh pr edit ${{ steps.check-pr.outputs.pr_number }} \
            --title "🚀 Release ${{ steps.release-info.outputs.next_version }}: staging → main"
          
          # Update PR body with fresh commit list using the temp file
          gh pr edit ${{ steps.check-pr.outputs.pr_number }} \
            --body-file "$PR_BODY_FILE"
          
          # Add a comment about the update
          gh pr comment ${{ steps.check-pr.outputs.pr_number }} --body "🔄 **Staging Updated** - ${{ steps.release-info.outputs.next_version }}
          
          New changes have been pushed to staging. The PR title, version, and commit list have been refreshed."
          
          **Latest commits:**
          ${{ steps.release-info.outputs.commits }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
